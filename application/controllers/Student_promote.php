<?php

/*
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */

class Student_promote extends CI_Controller {

    function __construct() {
        parent::__construct();
        $this->load->model('Student_promote_model');
        $this->load->model('Payment_model');
    }

    /*
     * Listing of student_promote
     */

    function index() {
        $data['student_promote'] = $this->Student_promote_model->get_all_student_promote();

        $data['_view'] = 'student_promote/index';
        $this->load->view('layouts/main', $data);
    }

    /*
     * Adding a new student_promote
     */

   function add() {
        $this->load->library('form_validation');

        $this->form_validation->set_rules('class', 'Class', 'required');
        $this->form_validation->set_rules('section', 'Section', 'required');
//      $this->form_validation->set_rules('student', 'Student', 'required');
        $this->form_validation->set_rules('section', 'Section', 'required');
        $this->form_validation->set_rules('class_new', 'New Class', 'required');
        $this->form_validation->set_rules('section_new', 'New Section', 'required');
        $this->form_validation->set_rules('tosession', 'New Session', 'required');
        $this->form_validation->set_rules('acadamic_session', 'From Session', 'required');

        if ($this->form_validation->run()) {
            $stud = $this->input->post('stud');
            
            if ($this->input->post('class_new') <= 19) {
               // print_r($this->input->post('class'));
                //die;
               // $rte_applicable = in_array($v, $rte_applicable_students);
               foreach ($stud as $k => $v) {
                $this->load->model('Student_model');

                $this->load->model('Academic_year_model');

                $previousSession = $this->Academic_year_model->get_session($this->input->post('acadamic_session'));
                $newSession = $this->Academic_year_model->get_session($this->input->post('tosession'));

                $this->load->model('Fee_model');
                $fees = $this->Fee_model->getFeeBySessionClass($this->input->post('tosession'), $this->input->post('class_new'));
                //print_r($fees);
                //die;
                if(empty($fees)){
                    $this->session->set_flashdata('alertType','failed' );
                    $this->session->set_flashdata('message','plz add fees , Fees not found for this class and session...' );
                    redirect('student_promote/add');
                }

                $params = array(
                    'student_id' => $v,
                    'previous_class_id' => $this->input->post('class'),
                    'new_class_id' => $this->input->post('class_new'),
                    'previous_session' => $this->input->post('acadamic_session'),
                    'next_session' => $this->input->post('tosession'),
                    'section_id' => $this->input->post('section_new'),
                    'promotion_date' => date('Y-m-d H:i:s'),
                    'old_academic_year' => $previousSession['session'],
                    'new_academic_year' => $newSession['session'],
                );
                $student_promote_id = $this->Student_promote_model->add_student_promote($params);
                
                $student_param = array(
                    'class_id' => $this->input->post('class_new'),
                    'section_id' => $this->input->post('section_new'),
                    'academic_year' => $newSession['session'],
                    'session_id' => $this->input->post('tosession'),
                    'rte_applicable' => 0,       
                );
                $this->Student_model->promote_student($v, $student_param);
        
                $totalfees=0;
                if (!empty($fees)) {
                    switch ($value->fees_for) {
                        case 'Tution Fees':
                            $total_amount = $value->amount;
                            $totalfees = $totalfees + $value->amount;
                            break;
                        default:
                            # code...
                            break;
                    }
                }
              
                $payment_parameter = array(
                    'student_id' => $v,
                    'academic_year' => $newSession['session'],
                    'session_id' => $this->input->post('tosession'),
                    'class_id' => $this->input->post('class_new'),
                    'total_amount' =>$totalfees,
                    'paid_amount' => 0,
                    'payment_seq' => 0,
                    'sync' => 0,
                    'late_fee' => 0,
                    'created_by' => $this->session->user_id,
                    'statusID' => 1,
                ); 
               // print_r($payment_parameter);die();
                $payment_id = $this->Payment_model->add_payment($payment_parameter);
               }

            } else {
                # for other then 8th Standered
               // print_r($this->input->post('class_new'));
               // die;
                $rte_applicable_students = $this->input->post('rte_applicable');
                foreach ($stud as $k => $v) {
                   
                    $this->load->model('Student_model');
                    $rte_applicable = $this->Student_model->getrteapplicable($v);
                    //print_r($rte_applicable);
                    //die;
                    $this->load->model('Academic_year_model');

                    $previousSession = $this->Academic_year_model->get_session($this->input->post('acadamic_session'));
                    $newSession = $this->Academic_year_model->get_session($this->input->post('tosession'));

                    $this->load->model('Fee_model');
                    $fees = $this->Fee_model->getFeeBySessionClass($this->input->post('tosession'), $this->input->post('class_new'));
                    if(empty($fees)){
                        $this->session->set_flashdata('alertType','failed' );
                        $this->session->set_flashdata('message','plz add fees , Fees not found for this class and session...' );
                        redirect('student_promote/add');
                    }

                    $params = array(
                        'student_id' => $v,
                        'previous_class_id' => $this->input->post('class'),
                        'new_class_id' => $this->input->post('class_new'),
                        'previous_session' => $this->input->post('acadamic_session'),
                        'next_session' => $this->input->post('tosession'),
                        'section_id' => $this->input->post('section_new'),
                        'promotion_date' => date('Y-m-d H:i:s'),
                        'old_academic_year' => $previousSession['session'],
                        'new_academic_year' => $newSession['session'],
                    );
                    $student_promote_id = $this->Student_promote_model->add_student_promote($params);

    
                    if ($rte_applicable == 0) {
                        $student_param = array(
                            'class_id' => $this->input->post('class_new'),
                            'section_id' => $this->input->post('section_new'),
                            'academic_year' => $newSession['session'],
                            'session_id' => $this->input->post('tosession'),
                            'rte_applicable' => 0,     
                        );
                    } else {
                        $student_param = array(
                            'class_id' => $this->input->post('class_new'),
                            'section_id' => $this->input->post('section_new'),
                            'academic_year' => $newSession['session'],
                            'session_id' => $this->input->post('tosession'),
                            'rte_applicable' => 1,    
                        );
                    }
    
                    $this->Student_model->promote_student($v, $student_param);
                    

    
                    if ($rte_applicable == 0) {

                        $totalfees=0;
                        if (!empty($fees)) {
                            switch ($value->fees_for) {
                                case 'Tution Fees':
                                    $total_amount = $value->amount;
                                    $totalfees = $totalfees + $value->amount;
                                    break;
                                default:
                                    # code...
                                    break;
                            }
                        }
                    
                        $payment_parameter = array(
                            'student_id' => $v,
                            'academic_year' => $newSession['session'],
                            'session_id' => $this->input->post('tosession'),
                            'class_id' => $this->input->post('class_new'),
                            'total_amount' =>$totalfees,
                            'paid_amount' => 0,
                            'payment_seq' => 0,
                            'sync' => 0,
                            'late_fee' => 0,
                            'created_by' => $this->session->user_id,
                            'statusID' => 1,
                        ); 
                    }else{

                        $totalfees=0;
                        
                       $payment_parameter = array(
                            'student_id' => $v,
                            'academic_year' => $newSession['session'],
                            'session_id' => $this->input->post('tosession'),
                            'class_id' => $this->input->post('class_new'),
                            'total_amount' =>$totalfees,
                            'paid_amount' => 0,
                            'sync' => 0,
                            'late_fee' => 0,
                            'created_by' => $this->session->user_id,
                            'statusID' => 1,
                        ); 
                    }
                    $payment_id = $this->Payment_model->add_payment($payment_parameter);
                }
            }

            $this->session->set_flashdata('alertType','success' );
            $this->session->set_flashdata('message','Students Pramoted Successfully.....' );

            redirect('student_promote/index');
        } else {
            //$this->load->model('Student_model');
            //$data['all_student'] = $this->Student_model->get_all_student();

            $this->load->model('Clas_model');
            $data['all_class'] = $this->Clas_model->get_all_class();

            $this->load->model('Section_model');
            $data['all_section'] = $this->Section_model->get_all_section();

            $this->load->model('Academic_year_model');
            $data['all_sessions'] = $this->Academic_year_model->get_all_session();

            $data['_view'] = 'student_promote/add';
            $this->load->view('layouts/main', $data);
        }
    }

    /*
     * Editing a student_promote
     */

    function edit($promotion_id) {
        // check if the student_promote exists before trying to edit it
        $data['student_promote'] = $this->Student_promote_model->get_student_promote($promotion_id);

        if (isset($data['student_promote']['promotion_id'])) {
            $this->load->library('form_validation');

            $this->form_validation->set_rules('student_id', 'Student Id', 'required');
            $this->form_validation->set_rules('previous_class_id', 'Previous Class Id', 'required');
            $this->form_validation->set_rules('new_class_id', 'New Class Id', 'required');
            $this->form_validation->set_rules('section_id', 'Section Id', 'required');

            if ($this->form_validation->run()) {
                $params = array(
                    'student_id' => $this->input->post('student_id'),
                    'previous_class_id' => $this->input->post('previous_class_id'),
                    'new_class_id' => $this->input->post('new_class_id'),
                    'section_id' => $this->input->post('section_id'),
                );

                $this->Student_promote_model->update_student_promote($promotion_id, $params);
                $this->load->model('Fee_model');
                $this->load->model('Payment_model');
                $fees = $this->Fee_model->getTotalFeeByClass($this->input->post('new_class_id'));
                $student = $this->Payment_model->getMaxPaymentIdByStudent($this->input->post('student_id'));
                $payment_id = $student->payment_id;
                $payment_parameter = array(
                    'total_amount' => $fees->total_amount,
                );
                $this->Payment_model->updatePaymentPromotedEdit($payment_id, $payment_parameter);

                $student_param = array(
                    'class_id' => $this->input->post('new_class_id'),
                    'section_id' => $this->input->post('section_id'),
                );
                $this->load->model('Student_model');
                $this->Student_model->promote_student($this->input->post('student_id'), $student_param);

                redirect('student_promote/index');
            } else {
                $this->load->model('Student_model');
                $data['all_student'] = $this->Student_model->get_all_student();

                $this->load->model('Clas_model');
                $data['all_class'] = $this->Clas_model->get_all_class();
                $data['all_class'] = $this->Clas_model->get_all_class();

                $this->load->model('Section_model');
                $data['all_section'] = $this->Section_model->get_all_section();

                $data['_view'] = 'student_promote/edit';
                $this->load->view('layouts/main', $data);
            }
        } else
            show_error('The student_promote you are trying to edit does not exist.');
    }

    /*
     * Deleting student_promote
     */

    function remove($promotion_id) {
        $student_promote = $this->Student_promote_model->get_student_promote($promotion_id);

        // check if the student_promote exists before trying to delete it
        if (isset($student_promote['promotion_id'])) {
            $this->Student_promote_model->delete_student_promote($promotion_id);
            redirect('student_promote/index');
        } else
            show_error('The student_promote you are trying to delete does not exist.');
    }

}
