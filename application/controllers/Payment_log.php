<?php

/*
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */

class Payment_log extends CI_Controller {

    function __construct() {
        parent::__construct();
        $this->load->model('Payment_log_model');
        $this->load->model('Student_model');
        $this->load->model('Academic_year_model');
        include APPPATH . 'third_party/Numbertowords.php';
    }

    /*
     * Listing of payment_log
     */

    function index() {
        $data['payment_log'] = $this->Payment_log_model->get_all_payment_log();

        $data['_view'] = 'payment_log/index';
        $this->load->view('layouts/main', $data);
    }

    function new_recept() {
        $data['_view'] = 'payment_log/new_recept';
        $this->load->view('layouts/main', $data);
    }

    /*
     * Adding a new payment_log
     */

    function add($student_id = 0) {
        $this->load->library('form_validation');

        $this->form_validation->set_rules('EducationFee', 'Education Fee', 'required');
        $this->form_validation->set_rules('TermFee', 'Term Fee', 'required');
        $this->form_validation->set_rules('ExamFee', 'Exam Fee', 'required');
        $this->form_validation->set_rules('SportFee', 'Sport Fee', 'required');
        $this->form_validation->set_rules('MiscellaneousFee', 'Miscellaneous Fee', 'required');
//        $this->form_validation->set_rules('month', 'Month', 'required');


        if ($this->form_validation->run()) {
            $payment_details = json_encode($this->input->post());

            $this->load->model('Payment_model');
            $old_payment_id = $this->input->post('payment_id');
            $old_paying_amount = $this->input->post('back_year_fee');
           // print_r($old_payment_id);
           // print_r($old_paying_amount);
           // die;
            $total_old_fee = 0;
            if (isset($old_payment_id)) {
                $count = 0;
                $total_old_fee = 0;
                foreach ($old_payment_id as $k => $v) {
                    $this->Payment_model->updatePayment($old_paying_amount[$k], $v);
                    $total_old_fee = $total_old_fee + $old_paying_amount[$k];
                }
            }
            $old_fee = $this->input->post('oldfee');
            if (isset($old_fee)) {
                $total_old_fee = $old_fee + $total_old_fee;
                $this->Payment_model->updatePastPayment($old_fee, $student_id);
            }


//            foreach ()
//            if ($this->input->post('oldfee')) {
//                $old_fee = $this->input->post('oldfee');
//            } else {
//                $old_fee = 0;
//            }
            $reciept_no = $this->getRecieptNo($student_id);
            $current_academic_year_payment_id = $this->input->post('current_year_academic_payment_id');
            $params = array(
                'reciept_no' => $reciept_no,
                'education_fee' => $this->input->post('EducationFee'),
                'term_fee' => $this->input->post('TermFee'),
                'exam_fee' => $this->input->post('ExamFee'),
                'sport_fee' => $this->input->post('SportFee'),
                'misc_fee' => $this->input->post('MiscellaneousFee'),
                'old_fee' => $total_old_fee,
                'month' => $this->input->post('from_month'),
                'to_month' => $this->input->post('to_month'),
                'created_date' => date('Y-m-d H:i:s'),
                'payment_id' => $current_academic_year_payment_id,
                'remark' => $this->input->post('remark'),
                'payment_details' => $payment_details,
            );
            $payment_log_id = $this->Payment_log_model->add_payment_log($params);
            $params = array(
                'education_fee' => $this->input->post('EducationFee'),
                'term_fee' => $this->input->post('TermFee'),
                'exam_fee' => $this->input->post('ExamFee'),
                'sport_fee' => $this->input->post('SportFee'),
                'misc_fee' => $this->input->post('MiscellaneousFee'),
//                'old_fee' => $total_old_fee,
            );
            $total_payment = array_sum($params);

//            $student = $this->Student_model->getStudentDataByPaymentId($payment_id);
//            $this->_sendPaymentMsg($total_payment, $student);



            $this->Payment_model->updatePayment($total_payment, $current_academic_year_payment_id);
            $updatedpaymenttype = array(
                'education_fee' => $this->input->post('EducationFee'),
                'term_fee' => $this->input->post('TermFee'),
                'exam_fee' => $this->input->post('ExamFee'),
                'sport_fee' => $this->input->post('SportFee'),
                'misc_fee' => $this->input->post('MiscellaneousFee'),
                                   );
            $this->Payment_model->updatePaymentTypes($updatedpaymenttype, $current_academic_year_payment_id);



            redirect('payment_log/view_and_msg/' . $payment_log_id);
        } else {
            $data['_view'] = 'payment/student_payment' . $student_id;
            $this->load->model("Fee_model");
            $this->load->model("Payment_model");
            $record = $this->Payment_model->getPaymentByStudent($student_id);
            $data['record'] = $record;
            $data['existing_fees'] = $this->Fee_model->get_fee($record->class_id);
            $data['student_id'] = $student_id;
            $this->load->view('layouts/main', $data);
            redirect(base_url() . 'payment_log/view_and_msg/' . $payment_log_id);
        }
    }

    /*
     * Editing a payment_log
     */

    function edit($payment_log_id) {
        // check if the payment_log exists before trying to edit it
        $record = $this->Payment_log_model->get_payment_log($payment_log_id);
        $data['payment_log'] = $record;
        $this->load->model('Fee_model');
        $data['fee_data'] = $this->Fee_model->get_fee($record->class_id);
        if (isset($data['payment_log']->payment_log_id)) {
            $this->load->library('form_validation');

            $this->form_validation->set_rules('payment_id', 'payment_id', 'required');
            $this->form_validation->set_rules('EducationFee', 'Education Fee', 'required');
            $this->form_validation->set_rules('TermFee', 'Term Fee', 'required');
            $this->form_validation->set_rules('ExamFee', 'Exam Fee', 'required');
            $this->form_validation->set_rules('SportFee', 'Sport Fee', 'required');
            $this->form_validation->set_rules('MiscellaneousFee', 'Miscellaneous Fee', 'required');

            if ($this->form_validation->run()) {
                if ($this->input->post('oldfee')) {
                    $old_fee = $this->input->post('oldfee');
                } else {
                    $old_fee = 0;
                }
                $params = array(
                    'education_fee' => $this->input->post('EducationFee'),
                    'term_fee' => $this->input->post('TermFee'),
                    'exam_fee' => $this->input->post('ExamFee'),
                    'sport_fee' => $this->input->post('SportFee'),
                    'misc_fee' => $this->input->post('MiscellaneousFee'),
                    'old_fee' => $old_fee,
                );
                $this->load->model('Payment_model');
                $this->Payment_model->updateEditedPayment($this->input->post('diffence') + $this->input->post('total'), $this->input->post('payment_id'));
                $this->Payment_log_model->update_payment_log($payment_log_id, $params);
                redirect('payment_log/index');
            } else {
                $data['_view'] = 'payment_log/edit';
                $this->load->view('layouts/main', $data);
            }
        } else
            show_error('The payment_log you are trying to edit does not exist.');
    }

    /*
     * Deleting payment_log
     */

    function remove($payment_log_id) {
        $payment_log = $this->Payment_log_model->get_payment_log($payment_log_id);
        $this->load->model('Payment_model');

        $payment_id = $payment_log->payment_id;
        $amount = $payment_log->total;
        $amount_to_update = $payment_log->paid_amount - $amount;
        $this->Payment_model->updateEditedPayment($amount_to_update, $payment_id);
        // check if the payment_log exists before trying to delete it
        if (isset($payment_log->payment_log_id)) {
            $this->Payment_log_model->delete_payment_log($payment_log_id);
            redirect('payment_log/index');
        } else
            show_error('The payment_log you are trying to delete does not exist.');
    }

    function view($payment_log_id) {
        $logResult = $this->Payment_log_model->get_payment_log_for_old_receipt($payment_log_id);
        if(!empty($logResult)){
          
            $record = $this->Payment_log_model->get_payment_log($payment_log_id);
            $data['payment_log'] = $record;
            if($record->payment_session !=0 ){
                $session_data = $this->Academic_year_model->get_session($record->payment_session);
                $data['payment_session'] = $session_data['session'];
            }else{
                $data['payment_session'] = '-';
            }
            $convertor = new Numbertowords();
            $this->load->model('Fee_model');
            $data['fee'] = $this->Fee_model->get_class_all_fees($record->payment_session,$record->class_id);
            //var_dump($data['fee']);die;
            $data['_view'] = 'payment_log/new_recept';
            $this->load->view('layouts/main', $data);
        }else{

        }
    }

    function view_and_msg($payment_log_id) {
        
        $logResult = $this->Payment_log_model->get_payment_log_for_old_receipt($payment_log_id);
        if(!empty($logResult)){
           if(empty($logResult['is_old_receipt'])){
            $record = $this->Payment_log_model->get_payment_log($payment_log_id);
            $data['payment_log'] = $record;
            if($record->payment_session !=0 ){
                $session_data = $this->Academic_year_model->get_session($record->payment_session);
                $data['payment_session'] = $session_data['session'];
            }else{
                $data['payment_session'] = '-';
            }
            $convertor = new Numbertowords();
            $data['in_word'] = $convertor->convert_number($record->total);
            $this->load->model('Fee_model');
            $data['fee_data'] = $this->Fee_model->get_class_all_fees($record->payment_session,$record->class_id);
    //        var_dump($data);die;
            $data['_view'] = 'payment_log/new_recept';
            $this->load->view('layouts/main', $data);
           }else{
             $data['payment_log'] = $logResult;
             $data['payment_log_data'] = json_decode($logResult['payment_details']);
             $data['payment_session'] = 'OLD-COVID';
             $data['student_data'] = $this->Student_model->get_student_for_old_receipt($data['payment_log_data']->student_id);
             //print_r($data['student_data']);die();
             $convertor = new Numbertowords();
             $data['in_word'] = $convertor->convert_number($data['payment_log_data']->total);
             $data['_view'] = 'payment_log/new_recept';
             $this->load->view('layouts/main', $data);
           }
        }else{

        }

        
    }

    // private function _sendPaymentMsg($amt, $student_data) {
    //     $msg = "Dear," . $student_data->fullname . ' Fess amt Rs' . $amt . 'Is Paid For Academic year' . $student_data->academic_year;
    //     $mobile_no = $student_data->mobile_no;
    //     $obj = new stdClass();
    //     $obj->username = "oxfesmtr";
    //     $obj->password = "abc@123";
    //     $obj->from = "OXFESM";
    //     $obj->to = $mobile_no;
    //     $obj->text = $msg;
    //     $obj->coding = "0";
    //     $obj->flash = "1";
    //     $api_post = json_encode($obj);
    //     $get_data = $this->callAPI('POST', 'http://49.50.67.32/smsapi/jsonapi.jsp', $api_post);
    //     $response = json_decode($get_data, true);
    //     $errors = $response['response']['errors'];
    //     $data = $response['response']['data'][0];
    //     return $ch;
    // }

    function add_old($para1 = 0, $para2 = 0, $para3 = 0, $para4 = 0) {
        $data['remaining'] = $para3;
        $data['payment_id'] = $para1;
        $data['student_id'] = $para2;
        $data['academic_year'] = $para4;
        $this->load->library('form_validation');
        $this->form_validation->set_rules('amount', 'Amount', 'required');

        if ($this->form_validation->run() == true) {
            $this->load->model('Payment_log_model');
            $this->load->model('Payment_model');
            $reciept_no = $this->getRecieptNo($para2);
            $params = array(
                'reciept_no' => $reciept_no,
                'education_fee' => 0,
                'term_fee' => 0,
                'exam_fee' => 0,
                'sport_fee' => 0,
                'misc_fee' => 0,
                'old_fee' => $this->input->post('amount'),
                'month' => '',
                'to_month' => '',
                'created_date' => date('Y-m-d H:i:s'),
                'payment_id' => $para1,
                'remark' => $this->input->post('remark'),
            );
            $payment_log_id = $this->Payment_log_model->add_payment_log($params);
            $this->Payment_model->updatePayment($this->input->post('amount'), $para1);
            redirect('payment_log/view_and_msg/' . $payment_log_id);
        } else {
            $data['_view'] = 'payment_log/add_old_payment_academic_year';
            $this->load->view('layouts/main', $data);
        }
    }

    function callAPI($method, $url, $data) {
        $curl = curl_init();
        switch ($method) {
            case "POST":
                curl_setopt($curl, CURLOPT_POST, 1);
                curl_setopt($curl, CURLOPT_POSTFIELDS, $data);
                break;
            case "PUT":
                curl_setopt($curl, CURLOPT_CUSTOMREQUEST, "PUT");
                if ($data)
                    curl_setopt($curl, CURLOPT_POSTFIELDS, $data);
                break;
            default:
                if ($data)
                    $url = sprintf("%s?%s", $url, http_build_query($data));
        }
    }

    function getRecieptNo($student_id) {
        $this->load->model('Student_model');
        $student_data = $this->Student_model->getStudentDataForReciept($student_id);
        $maxid = $this->Student_model->getMaxPaymentLogId();
        $maxid++;
        $reciept_no = $student_data->numeric_name . '' . $student_data->section_name . '' . $maxid;
        return $reciept_no;
    }

}
