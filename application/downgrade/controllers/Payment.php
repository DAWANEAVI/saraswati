<?php

/*
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */

class Payment extends CI_Controller {

    function __construct() {
        parent::__construct();
        $this->load->model('Payment_model');
    }

    /*
     * Listing of payments
     */

    function index() {
        redirect(base_url().'payment_log');
    }

    /*
     * Adding a new payment
     */

    function add() {
        $this->load->library('form_validation');

        $this->form_validation->set_rules('student_id', 'Student Id', 'required');
        $this->form_validation->set_rules('academic_year', 'Academic Year', 'required');
        $this->form_validation->set_rules('total_amount', 'Total Amount', 'required');
        $this->form_validation->set_rules('paid_amount', 'Paid Amount', 'required');

        if ($this->form_validation->run()) {
            $params = array(
                'student_id' => $this->input->post('student_id'),
                'academic_year' => $this->input->post('academic_year'),
                'total_amount' => $this->input->post('total_amount'),
                'paid_amount' => $this->input->post('paid_amount'),
            );

            $payment_id = $this->Payment_model->add_payment($params);
            redirect('payment/index');
        } else {
            $this->load->model('Clas_model');
            $data['all_class'] = $this->Clas_model->get_all_class();



            $data['_view'] = 'payment/add';
            $this->load->view('layouts/main', $data);
        }
    }

    /*
     * Editing a payment
     */

    function edit($payment_id) {
        // check if the payment exists before trying to edit it
        $data['payment'] = $this->Payment_model->get_payment($payment_id);

        if (isset($data['payment']['payment_id'])) {
            $this->load->library('form_validation');

            $this->form_validation->set_rules('student_id', 'Student Id', 'required');
            $this->form_validation->set_rules('academic_year', 'Academic Year', 'required');
            $this->form_validation->set_rules('total_amount', 'Total Amount', 'required');
            $this->form_validation->set_rules('paid_amount', 'Paid Amount', 'required');

            if ($this->form_validation->run()) {
                $params = array(
                    'student_id' => $this->input->post('student_id'),
                    'academic_year' => $this->input->post('academic_year'),
                    'total_amount' => $this->input->post('total_amount'),
                    'paid_amount' => $this->input->post('paid_amount'),
                );

                $this->Payment_model->update_payment($payment_id, $params);
                redirect('payment/index');
            } else {
                $this->load->model('Student_model');
                $data['all_student'] = $this->Student_model->get_all_student();

                $data['_view'] = 'payment/edit';
                $this->load->view('layouts/main', $data);
            }
        } else
            show_error('The payment you are trying to edit does not exist.');
    }

    /*
     * Deleting payment
     */

    function remove($payment_id) {
        $payment = $this->Payment_model->get_payment($payment_id);

        // check if the payment exists before trying to delete it
        if (isset($payment['payment_id'])) {
            $this->Payment_model->delete_payment($payment_id);
            redirect('payment/index');
        } else
            show_error('The payment you are trying to delete does not exist.');
    }

    function getPaymentByStudent() {
        $student_id = $this->input->post('student_id');
        $result = $this->Payment_model->getPaymentByStudent($student_id);
        echo json_encode($result);
    }

    function make_payment($student_id = 0) {
        $data['_view'] = 'payment/student_payment';
        $this->load->model("Fee_model");
        $record = $this->Payment_model->getPaymentByStudent($student_id);
       
        $data['record'] = $record;
        
        $get_ClassNum = $this->Payment_model->getClassNumber($record->class_id);

        $class_id= $this->Payment_model->getLastClassid($get_ClassNum->numeric_name-1);
        if(is_null($class_id)){
            switch($record->class_id){
                case 30:
                $data['old_fees'] =0;
                break;
                 case 29:
                $data['old_fees'] =$this->Fee_model->get_fee(30);
                break;
                 case 28:
                $data['old_fees'] =$this->Fee_model->get_fee(29);
                break;
                
            }
           
        }else{
             $data['old_fees'] = $this->Fee_model->get_fee($class_id->class_id);
        }
        $data['payments_history'] = $this->Payment_model->getAllPaymentHistory($student_id);
        $data['payment_record'] = $this->Payment_model->getAllPaymentRecord($student_id);
        $data['academic_year'] = $this->Payment_model->getStudentAcademicYear($student_id);
        $data['record'] = $record;
       
        $data['existing_fees'] = $this->Fee_model->get_fee($record->class_id);
        $data['student_id'] = $student_id;
        
//        echo "<pre>";
//        var_dump($data);die;
        $this->load->view('layouts/main', $data);
    }
    
    

}

