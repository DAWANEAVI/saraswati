<?php
/* 
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */
 
class Clas_model extends CI_Model
{
    function __construct()
    {
        parent::__construct();
    }
    
    /*
     * Get clas by class_id
     */
    function get_clas($class_id)
    {
        return $this->db->get_where('class',array('class_id'=>$class_id))->row_array();
    }

    function get_clas_name($class_id)
    {
        return $this->db->get_where('class',array('class_id'=>$class_id))->row()->class_name;
    }
        
    /*
     * Get all class
     */
    function get_all_class() 
{
    // Fetch data from the database
   $this->db->select('class_id, class_name, numeric_name');
   $this->db->order_by('class_id','DESC');
   $query = $this->db->get('class');
   // print_r($query);

   if (!$query || $query->num_rows() == 0) {
    return []; // Return an empty array if no data is found or query fails
   }

    $classes = $query->result_array();  // Get results as an array

    // // Custom sorting logic
    // usort($classes, function ($a, $b) {
    //     // Check if both are alphabetic (not numeric)
    //     $is_a_numeric = is_numeric($a['numeric_name']);
    //     $is_b_numeric = is_numeric($b['numeric_name']);

    //     // Case 1: Both are alphabetic (not numeric)
    //     if (!$is_a_numeric && !$is_b_numeric) {
    //         // Handle 'Nursery' as special case: always comes first
    //         if ($a['numeric_name'] == 'Nursery' && $b['numeric_name'] != 'Nursery') {
    //             return -1;  // 'Nursery' comes first
    //         }
    //         if ($b['numeric_name'] == 'Nursery' && $a['numeric_name'] != 'Nursery') {
    //             return 1;   // 'Nursery' comes first
    //         }

    //         // Sort alphabetic names in ascending order based on string length (and lexicographically if needed)
    //         $len_a = strlen($a['numeric_name']);
    //         $len_b = strlen($b['numeric_name']);
            
    //         if ($len_a == $len_b) {
    //             // If lengths are the same, sort lexicographically (alphabetically)
    //             return strcmp($a['numeric_name'], $b['numeric_name']);
    //         }

    //         // Sort by length in ascending order
    //         return $len_a - $len_b;
    //     }

    //     // Case 2: One is alphabetic and the other is numeric
    //     if (!$is_a_numeric && $is_b_numeric) {
    //         return -1;  // Alphabetic comes first
    //     }
    //     if ($is_a_numeric && !$is_b_numeric) {
    //         return 1;   // Alphabetic comes first
    //     }

    //     // Case 3: Both are numeric, sort them in descending order
    //     return (int)$b['numeric_name'] - (int)$a['numeric_name'];
    // });

    return $classes;  // Return the sorted array
}

        
    /*
     * function to add new clas
     */

    function add_clas($params)
{
    // Insert the class data into the 'class' table
    if ($this->db->insert('class', $params)) {
        // Return the ID of the inserted record if successful
        return $this->db->insert_id();
    } else {
        // Return false if the insert fails
        log_message('error','Database insert failed:'.$this->db->error()['message']);
        return false;
    }
}

    
    /*
     * function to update clas
     */
    function update_clas($class_id,$params)
    {
        $this->db->where('class_id',$class_id);
        return $this->db->update('class',$params);
    }
    
    /*
     * function to delete clas
     */
    function delete_clas($class_id)
    {
        return $this->db->delete('class',array('class_id'=>$class_id));
    }
}
