<?php
/* 
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */
 
class Payment_model extends CI_Model
{
    function __construct()
    {
        parent::__construct();
    }
    
    /*
     * Get payment by payment_id
     */
    function get_payment($payment_id)
    {
        return $this->db->get_where('payments',array('payment_id'=>$payment_id))->row_array();
    }
        
    /*
     * Get all payments
     */
    function get_all_payments()
    {
        $this->db->select('p.*,s.fullname,s.mobile_no,c.numeric_name');
        $this->db->from('payments p');
        $this->db->join('student s','p.student_id=s.student_id','inner');
        $this->db->join('class c','s.class_id=c.class_id','inner');
        $this->db->where('p.total_amount >p.paid_amount');
        $this->db->order_by('payment_id', 'desc');
        $this->db->group_by('s.student_id', 'desc');
        return $this->db->get('payments')->result_array();
    }
        
    /*
     * function to add new payment
     */
    function add_payment($params)
    {
        $this->db->insert('payments',$params);
        //print_r($this->db->last_query());die();
        return $this->db->insert_id();
    }
    
    /*
     * function to update payment
     */
    function update_payment($payment_id,$params)
    {
        $this->db->where('payment_id',$payment_id);
        return $this->db->update('payments',$params);
    }
    function updatePaymentByStudentIdAcademicYear($student_id,$academic_year,$params){
         $this->db->where('student_id',$student_id);
         $this->db->where('academic_year',$academic_year);
         return $this->db->update('payments',$params);
    }
    
    function updateEditedPayment($amount,$id){
        $this->db->set('paid_amount',$amount);
        $this->db->where('payment_id',$id);
        $this->db->update('payments');
    }
    
    /*
     * function to delete payment
     */
    function delete_payment($payment_id)
    {
        return $this->db->delete('payments',array('payment_id'=>$payment_id));
    }
    
    function getPaymentByStudent($student_id){
        $this->db->select('GROUP_CONCAT(payment_id) as id,GROUP_CONCAT(p.academic_year) as year,sum(p.total_amount) as total,sum(p.paid_amount) as paid,s.fullname,s.class_id,s.old_fees,s.paid_fees');
        $this->db->from('payments p');
        $this->db->join('student s','p.student_id=s.student_id','inner');
        $this->db->where('p.student_id',$student_id);
        $this->db->group_by('p.student_id');
        $query= $this->db->get();

        if (!$query) {
            log_message('error', 'Query failed: ' . $this->db->last_query());
            return null; // Return null if query fails
        }
        return $query->row();
    }

    function getPaymentData($payment_id) {
        $this->db->select('*');
        $this->db->from('payments');
        $this->db->where('payment_id',$payment_id);
        $this->db->where('statusID',1);
        return $this->db->get()->row();
    }
    

    /*function getPaymentData($payment_id){
      //  $this->db->select('*');
      $this->db->where('payment_id',$payment_id);
       // $this->db->from('payments');
      //  $this->db->where('payment_id',$payment_id);
       // $this->db->where('statusID',1);
      //  return $this->db->get();$result = $this->db->get('payments')->row(); // Assuming 'payments' is the table name

    log_message('debug', 'getPaymentData result: ' . print_r($result, true));

    return $result;

       // if (!$query) {
        //    log_message('error', 'Query failed: ' . $this->db->last_query());
            //return null; // Return null if query fails
     //   }
        //return $query->row(); // Return the payment record
    } */

    function getStudentPaymentData($student_id){
       // $this->db->select('payment_id, academic_year, class_id, total_amount, paid_amount');
       $this->db->select('*');
        $this->db->from('payments');
        $this->db->where('student_id',$student_id);
        $this->db->where('statusID',1);
        $query=$this->db->get();

        if (!$query) {
            log_message('error', 'Query failed: ' . $this->db->last_query());
            return []; // Return an empty array if query fails
        }

        return $query->result_array(); // Return payment records as an array
    }
    
    // function updatePayment($amt,$payment_id){
    //     $this->db->set('paid_amount','paid_amount+'.$amt,false);
    //     $this->db->where('payment_id',$payment_id);
    //     $this->db->update('payments');
    // }

    function add_system_log($params){
        $this->db->insert('system_log',$params);
        return $this->db->insert_id();
    }

    function update_old_heads($student_id,$params){
        $this->db->where('student_id',$student_id);
        return $this->db->update('student',$params);
    }
    
    function updatePastPayment($amt,$student_id){
        $this->db->set('paid_fees','paid_fees+'.$amt,false);
        $this->db->where('student_id',$student_id);
        $this->db->update('student');
    }
    function updatePayment($paramiters,$payment_id){
        $this->db->set('paid_amount','paid_amount+'.$paramiters["paid_amount"],false);
        $this->db->set('late_fee','late_fee+'.$paramiters["late_fee"],false);
        $this->db->where('payment_id',$payment_id);
        $this->db->update('payments');
    }
    
    function getMaxPaymentIdByStudent($stud_id){
        $this->db->select('max(payment_id)as payment_id');
        $this->db->from('payments');
        $this->db->where('student_id',$stud_id);
        $query = $this->db->get();
        return $query->row();
    }
    
    function updatePaymentPromotedEdit($payment_id,$param){
        $this->db->where('payment_id',$payment_id);
        $this->db->update('payments',$param);
    }
    
    function getAllPaymentHistory($student_id){
        $this->db->select("pl.*,p.academic_year,p.total_amount,p.paid_amount");
        $this->db->from('payment_log pl');
        $this->db->join('payments p','pl.payment_id=p.payment_id','inner');
        $this->db->where('p.student_id',$student_id);
        $query = $this->db->get();
        return $query->result_array();
    }

    function getAllPaymentheadwise($student_id,$accadmic_yr){
        $this->db->select("education_fee,term_fee,exam_fee,sport_fee,miscellaneous_fee");
        $this->db->from('payments');
        $this->db->where('student_id',$student_id);
        $this->db->where('academic_year',$accadmic_yr);
        $query = $this->db->get();
        return $query->row();
    }
    
    function getStudentAcademicYear($student_id){
         $this->db->select('academic_year');
         $this->db->from('student');
         $this->db->where('student_id',$student_id);
         $query = $this->db->get()->row();
         return $query->academic_year;
                 
    }
    function getClassNumber($class_id){
        $this->db->select('numeric_name');
        $this->db->from('class');
        $this->db->where('class_id',$class_id);
        $query = $this->db->get();
        return $query->row();
    }
    function getLastClassid($class_num){
         $this->db->select('class_id');
        $this->db->from('class');
        $this->db->where('numeric_name',$class_num);
        $query = $this->db->get();
        return $query->row();
    }
    
    function getPaymentHistory($stud_id){
        $this->db->select('*');
        $this->db->from('payments');
        $this->db->where('student_id',$stud_id);
        $query = $this->db->get();
        return $query->result_array();
    }
    
    function getTransactions($stud_id){
        $this->db->select('pl.*');
        $this->db->from('payment_log pl');
        $this->db->join('payments p','pl.payment_id=p.payment_id','inner');
        $this->db->where('p.student_id',$stud_id);
        $this->db->order_by('pl.payment_session','ASC');
        $query = $this->db->get();
        return $query->result_array();
        
    }
    
    function getAllPaymentRecord($student_id){
        $this->db->select('payment_id,academic_year,total_amount,paid_amount');
        $this->db->from('payments');
        $this->db->where('student_id',$student_id);
        return $this->db->get()->result_array();
    }
    
    function get_payment_id_by_session($session_id,$student_id){
        $this->db->select('payment_id');
        $this->db->from('payments');
        $this->db->where('student_id',$student_id);
        $this->db->where('session_id',$session_id);
        $query = $this->db->get()->row();
        return $query->payment_id;          
   }
   function get_unpaid_payments($student_id){
        $this->db->select('*');
        $this->db->from('payments');
        $this->db->where('student_id',$student_id);
        $this->db->where('statusID',1);
        $this->db->where('total_amount', '>' , 'paid_amount');
        $query = $this->db->get()->result_array();
        return $query;          
   }

   function get_unpaied_old_payment($student_id){
        $this->db->select('*');
        $this->db->from('student');
        $this->db->where('student_id',$student_id);
        $this->db->where('old_fees', '>' , 'paid_fees');
        return  $this->db->get()->row();         
    }
}
